@using Entities;
@{
    ViewBag.Title = "Index";
}

<div class="col-xs-10 page-col">
    <div class="row">
        <div class="col-xs-12">
            @using (Html.BeginForm("AddNewDevice", "AddDevice", FormMethod.Post, new { role = "form" }))
            {
            <h4>Device</h4>
            <div class="panel panel-default addModemForm">
                <div class="panel-body">
                    <fieldset>

                        <div class="row" role="form">
                            <div class="form-group col-xs-3">
                                @Html.Label("Name", new { @id = "BodyContentPlaceHolder_Label1", @class = "control-label", @for = "BodyContentPlaceHolder_txtMid" })
                                @Html.TextBox("Name", "", new { @id = "BodyContentPlaceHolder_txtName", @class = "form-control", placeholder = "Name", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtMid" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_rf1" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("DeviceId", new { @id = "BodyContentPlaceHolder_Label2", @class = "control-label", @for = "BodyContentPlaceHolder_txtDeviceId" })
                                @Html.TextBox("DeviceId", "", new { @class = "form-control", placeholder = "DeviceId", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtModemName" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator1" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("IMEI No", new { @id = "BodyContentPlaceHolder_Label3", @class = "control-label", @for = "BodyContentPlaceHolder_txtIMEI" })
                                @Html.TextBox("IMEI", "", new { @class = "form-control", placeholder = "IMEI", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            @{
                                    List<Device> DeviceModel = ViewBag.DeviceModels;
                            }
                            <div class="form-group col-xs-3">
                                @Html.Label("ModelId(Device Registery)", new { @id = "BodyContentPlaceHolder_Label5", @class = "control-label", @for = "BodyContentPlaceHolder_txt(DeviceRegistery" })
                                <select name="ModelId" id="ModelId" class="form-control">
                                    <option value="0">Select</option>
                                    @foreach (var item in DeviceModel)
                                        {
                                        <option value="@item.Id">@item.Name</option>
                                        }
                                </select>
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-1">
                                @Html.Label("Enable", new { @id = "BodyContentPlaceHolder_Label6", @class = "control-label", @for = "BodyContentPlaceHolder_txtEnable" })
                                @Html.CheckBox("Enable", new { @class = "form-control", placeholder = "Enable", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>

                            <div class="form-group col-xs-3">
                                @Html.Label("Motor Efficiency", new { @id = "BodyContentPlaceHolder_Label7", @class = "control-label", @for = "BodyContentPlaceHolder_txtMotorEfficiency" })
                                @Html.TextBox("MotorEfficiency", "", new { @class = "form-control", placeholder = "Motor Efficiency", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("Head", new { @id = "BodyContentPlaceHolder_Label8", @class = "control-label", @for = "BodyContentPlaceHolder_txtHead" })
                                @Html.TextBox("Head", "", new { @class = "form-control", placeholder = "Head", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("Motor Power", new { @id = "BodyContentPlaceHolder_Label9", @class = "control-label", @for = "BodyContentPlaceHolder_txtMotorPower" })
                                @Html.TextBox("MotorPower", "", new { @class = "form-control", placeholder = "Motor Power", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-2">
                                @Html.Label("Motor Control", new { @id = "BodyContentPlaceHolder_Label10", @class = "control-label", @for = "BodyContentPlaceHolder_txtMotor_Control" })
                                @Html.CheckBox("MotorControl", new { @class = "form-control", placeholder = "MotorControl", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("Benificiary Name", new { @id = "BodyContentPlaceHolder_Label11", @class = "control-label", @for = "BodyContentPlaceHolder_txtBenificiary_Name" })
                                @Html.TextBox("BenificiaryName", "", new { @class = "form-control", placeholder = "Benificiary Name", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("Work Order No", new { @id = "BodyContentPlaceHolder_Label11", @class = "control-label", @for = "BodyContentPlaceHolder_txtBenificiary_WorkOrderNoe" })
                                @Html.TextBox("WorkOrderNo", "", new { @class = "form-control", placeholder = "Work Order No", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>

                            <div class="form-group col-xs-3">
                                @Html.Label("District", new { @id = "BodyContentPlaceHolder_Label13", @class = "control-label", @for = "BodyContentPlaceHolder_txtDistrict" })
                                @Html.TextBox("District", "", new { @class = "form-control", placeholder = "District", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("Phone", new { @id = "BodyContentPlaceHolder_Label14", @class = "control-label", @for = "BodyContentPlaceHolder_txtPhone" })
                                @Html.TextBox("Phone", "", new { @class = "form-control", placeholder = "District", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("VFD", new { @id = "BodyContentPlaceHolder_Label15", @class = "control-label", @for = "BodyContentPlaceHolder_txtVFD" })
                                @Html.TextBox("VFD", "", new { @class = "form-control", placeholder = "VFD", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("Interval", new { @id = "BodyContentPlaceHolder_Label17", @class = "control-label", @for = "BodyContentPlaceHolder_txtInterval" })
                                @Html.TextBox("Interval", "", new { @class = "form-control", placeholder = "Interval", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-3">
                                @Html.Label("Address", new { @id = "BodyContentPlaceHolder_Label16", @class = "control-label", @for = "BodyContentPlaceHolder_txtAddress" })
                                @Html.TextArea("Address", "", new { @class = "form-control", placeholder = "Address", maxlength = "50" })
                                <span data-val-controltovalidate="BodyContentPlaceHolder_txtSimPin" data-val-errormessage="Cannot be blank!" data-val-display="Dynamic" data-val-validationgroup="addmodem" id="BodyContentPlaceHolder_RequiredFieldValidator2" class="text-danger" data-val="true" data-val-evaluationfunction="RequiredFieldValidatorEvaluateIsValid" data-val-initialvalue="" style="display:none;">Cannot be blank!</span>
                            </div>
                            <div class="form-group col-xs-11">
                                <input type="submit" name="ctl00$BodyContentPlaceHolder$btnSave" value="AddDevice" onclick="" id="BodyContentPlaceHolder_btnSave" class="btn btn-primary btn-md">

                                <input type="button" name="ctl00$BodyContentPlaceHolder$btnSave" value="Export" onclick="" id="export" class="btn btn-primary btn-md">
                                <input type="button" name="ctl00$BodyContentPlaceHolder$btnSave" value="PDF" onclick="" id="exportpdf" class="btn btn-primary btn-md">
                            </div>
                        </div>
                    </fieldset>
                </div>
            </div>
                                    }
        </div>
        <div class="col-xs-12 jqGridPager">
            <table id="grid" class="table"></table>
            <div id="jqGridPager"></div>
        </div>
    </div>
</div>

@section scripts{

    <script src="~/Scripts/jquery.min.js"></script>
    <script src="~/Scripts/trirand/i18n/grid.locale-en.js"></script>
    <script src="~/Scripts/trirand/src/jquery.jqGrid.js"></script>
    <script type="text/javascript" language="javascript" src="//cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"></script>
    <script type="text/javascript" language="javascript" src="//cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/pdfmake.min.js">	</script>
    <script type="text/javascript" language="javascript" src="//cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/vfs_fonts.js"></script>
    <script>
        //function getDeviceModel() {
        //    var locationList = "<option value>Select</option>";
        //    $.ajax({
        //        url: '/AddDevice/GetDeviceModels',
        //        contentType: 'application/json; charset=utf-8',
        //        dataType: 'json',
        //        type: 'POST',
        //        async: false,

        //        success: function (msg) {
        //            if (msg != undefined && msg.length > 0) {
        //                for (var i = 0; i < msg.length; i++) {
        //                    locationList += "<option value='" + msg[i].Id + "'>" + msg[i].Name + "</option>";
        //                }
        //            }
        //        },
        //        error: function (xhr, textstatus, errorThrown) {
        //        }
        //    });
        //    return locationList;
        //}
        $(document).ready(function () {

            getDeviceModel();
        });

        var TextDEvice = '';
        function getDeviceModel() {
            $.ajax
                ({
                    url: '/AddDevice/GetDeviceModels',
                    async: false,
                    type: 'POST',
                    datatype: 'application/json',
                    contentType: 'application/json',
                    success: function (result) {
                        console.log(result);
                        var ddltext = '';
                        for (var i = 0; i < result.length; i++) {
                            ddltext += result[i].Id + ':' + result[i].Name + ';';
                        }
                        ddltext = ddltext.slice(0, -1);
                        TextDEvice = ddltext;
                        console.log(TextDEvice);
                    },
                    error: function () {
                        alert("Whooaaa! Something went wrong..")
                    },
                });
        }

        function isNumberKey(evt) {

            var charCode = (evt.which) ? evt.which : event.keyCode

            if (charCode > 31 && (charCode < 48 || charCode > 57))

                return false;

            return true;

        }

        var GetData = function () {
            return $.ajax("/AddDevice/GetRegisteredDevice", {
                type: "POST"

            });
        }
        GetData().done(function (result) {
            $("#grid").jqGrid({
                datatype: 'local',

                data: result,
                colModel: [
                    { name: 'Id', label: 'ID', key: true, editable: true, editoptions: { readonly: "readonly" } },
                    { name: 'Name', label: 'Name', editable: true },
                    { name: 'DeviceId', label: 'DeviceId', editable: true },
                    { name: 'IMEI', label: 'IMEI', editable: true },
                    {
                        name: 'RegisteredDeviceId', label: 'RegisteredDeviceId', editable: true, edittype: 'select', formatter: 'select',
                        editoption: { value: TextDEvice }
                    },

                    { name: 'Enabled', label: 'Enabled', editable: true },
                    { name: 'MotorEfficiency', label: 'MotorEfficiency', editable: true },
                    { name: 'Head', label: 'Head', editable: true },
                    { name: 'MotorPower', label: 'MotorPower', editable: true },
                    { name: 'MotorControl', label: 'Motor Control', editable: true },
                    { name: 'BenificiaryName', label: 'Benificiary Name', editable: true },
                    { name: 'WorkOrderNo', label: 'WorkOrder No.', editable: true },
                    { name: 'District', label: 'District', editable: true },
                    { name: 'Phone', label: 'Phone', editable: true },
                    { name: 'VFD', label: 'VFD', editable: true },
                    { name: 'Address', label: 'Address', editable: true },
                    { name: 'Interval', label: 'Interval', editable: true },
                    { name: 'DistributorName', label: 'DistributorName', editable: true },
                    { name: 'CompanyName', label: 'CompanyName', editable: true },
                    { name: 'Lan', label: 'Lattitude', editable: true },
                    { name: 'Lon', label: 'Longitude', editable: true },
                    { name: 'Ccid', label: 'Ccid', editable: true },
                    { name: 'OpName', label: 'OpName', editable: true },
                    { name: 'Signal', label: 'Signal', editable: true },
                    { name: 'Serial', label: 'Serial', editable: true },
                    { name: 'STime', label: 'STime', editable: true },
                    { name: 'Btime', label: 'Btime', editable: true },

                ], caption: 'Device',
                width: '1000',
                height: 600,
                loadonce: true,
                rowNum: 5,
                viewrecords: true,
                rownumbers: true,
                rowList: [5, 10, 20, 50],
                sortorder: 'asc',
                pager: "#jqGridPager",
                editurl: '/AddDevice/UpdateRegisteredDevice'


            });
            $('#grid').jqGrid('navGrid', '#jqGridPager',
                { edit: false, add: false, del: true, search: false }, {}, {}, { url: '/AddDevice/DeleteRegsiteredDevice' }
            );

            $("#grid").jqGrid('inlineNav', '#jqGridPager',
                {
                    edit: true,
                    editicon: "ui-icon-pencil",
                    add: true,
                    addicon: "ui-icon-plus",
                    save: true,
                    saveicon: "ui-icon-disk",
                    cancel: true,
                    cancelicon: "ui-icon-cancel",

                    editParams: {
                        keys: false,
                        oneditfunc: null,
                        successfunc: function (val) {
                            if (val.responseText != "") {
                                alert(val.responseText);
                                $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                            }
                        },
                        url: null,
                        extraparam: {
                            EmpId: function () {
                                var sel_id = $('#jQGridDemo').jqGrid('getGridParam', 'selrow');
                                var value = $('#jQGridDemo').jqGrid('getCell', sel_id, '_id');
                                return value;
                            }
                        },
                        aftersavefunc: null,
                        errorfunc: null,
                        afterrestorefunc: null,
                        restoreAfterError: true,
                        mtype: "POST"
                    },
                    addParams: {
                        useDefValues: true,
                        addRowParams: {
                            keys: true,
                            extraparam: {},
                            // oneditfunc: function () { alert(); },
                            successfunc: function (val) {
                                if (val.responseText != "") {
                                    alert(val.responseText);
                                    $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                                }
                            }
                        }
                    }
                }
            );
            $("#export").on("click", function () {
                $("#grid").jqGrid("exportToExcel", {
                    includeLabels: true,
                    includeGroupHeader: true,
                    includeFooter: true,
                    fileName: "jqGridExport.xlsx",
                    maxlength: 40 // maxlength for visible string data
                })
            });
            //http://www.guriddo.net/documentation/guriddo/javascript/user-guide/exporting/
            //http://pdfmake.org/#/gettingstarted

            $("#exportpdf").on("click", function () {
                $("#grid").jqGrid("exportToPdf", {
                    title: 'jqGrid Export to PDF',
                    orientation: 'landscape',
                    pageSize: 'A3',
                    description: 'description of the exported document',
                    customSettings: null,
                    download: 'download',
                    includeLabels: true,
                    includeGroupHeader: true,
                    includeFooter: true,
                    fileName: "RegisteredDevices.pdf",
                    onBeforeExport: function (doc) {
                        doc.styles.tableBody.fontSize = 8;
                        doc.styles.tableBody.fontSize = 8;
                        doc.width = '1000';
                        
                    }
                })
            });
        });
    </script>

}